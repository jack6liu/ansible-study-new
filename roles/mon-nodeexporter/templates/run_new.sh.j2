#/bin/bash
help() {
    echo "help:"
    echo "    ./run-nodeexporter.sh [OPTIONS]"
    echo "    [OPTIONS]"
    echo "    --force -> to remove existing docker instance, then deploy new one."
    echo "    --safe  -> will not remove existing docker instance with same name."
    exit 0
}

run_container() {
    docker run      \
      --name nodeexporter       \
      --hostname nodeexporter       \
      --env NODE_EXPORTER_LISTEN_PORT={{ nodeexporter_listen_port }}      \
      --volume /proc:/host/proc:ro      \
      --volume /sys:/host/sys:ro        \
      --volume /:/rootfs:ro     \
      --volume /var/run/docker.sock:/var/run/docker.sock:ro     \
      --volume /hfc-data/nodeexporter/textfile:/textfile        \
      --publish 0.0.0.0:{{ nodeexporter_expose_port }}:9100     \
      --network host        \
      --dns {{ hostvars[groups['dns-server'].0].ansible_host }}     \
      --dns {{ hostvars[groups['dns-server'].1].ansible_host }}     \
      --dns-search {{ dnsmasq_domain }}     \
      --label com.jcloud.group="monitoring"     \
      --label com.jcloud.nodetype="nodeexporter"        \
      --restart always      \
      --detach      \
      {{ nodeexporter_image }}      \
      -collector.procfs /host/proc      \
      -collector.sysfs /host/sys        \
      -collector.filesystem.ignored-mount-points "^/(sys|proc|dev|host|etc)($|/)"       \
      -collector.textfile.directory "/textfile"

}
echo ">> BEGIN"
if [[ $# != '1' ]]; then
    echo "[ERROR] Only take one args."
    echo "      You enter $# args --> \"$@\""
    echo ""
    help
fi
if [[ "$1" == "--force" ]]; then
    echo ">> Deleting existing nodeexporter ..."
    docker rm -f nodeexporter
    echo ">> Try to run new nodeexporter ..."
elif [[ "$1" == "--safe" ]]; then
    echo ">> Try to run new nodeexporter ..."
else
    help
fi
run_container
echo ">> END"
